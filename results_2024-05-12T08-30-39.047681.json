{
  "results": {
    "truthfulqa": {
      "rouge1_acc,none": 0.40758873929008566,
      "rouge1_acc_stderr,none": 0.017201949234553118,
      "rouge2_acc,none": 0.3635250917992656,
      "rouge2_acc_stderr,none": 0.01683886288396585,
      "rouge2_diff,none": 0.08862766153182379,
      "rouge2_diff_stderr,none": 1.4238434499561607,
      "rouge1_max,none": 53.74633805640638,
      "rouge1_max_stderr,none": 0.9739494318333634,
      "rouge1_diff,none": -0.1477843841683331,
      "rouge1_diff_stderr,none": 1.2898064519778143,
      "rougeL_diff,none": -0.41446367764013875,
      "rougeL_diff_stderr,none": 1.3032764114582382,
      "bleu_acc,none": 0.42962056303549573,
      "bleu_acc_stderr,none": 0.017329234580409084,
      "bleu_max,none": 29.6269131996026,
      "bleu_max_stderr,none": 0.8574603472379521,
      "rougeL_max,none": 51.24154560202414,
      "rougeL_max_stderr,none": 0.9895143166154152,
      "acc,none": 0.3541317526976853,
      "acc_stderr,none": 0.010421009901678862,
      "bleu_diff,none": 0.4574828256686188,
      "bleu_diff_stderr,none": 1.0250948218993037,
      "rougeL_acc,none": 0.3953488372093023,
      "rougeL_acc_stderr,none": 0.01711581563241821,
      "rouge2_max,none": 39.74697161766915,
      "rouge2_max_stderr,none": 1.1224956270481141,
      "alias": "truthfulqa"
    },
    "truthfulqa_gen": {
      "bleu_max,none": 29.6269131996026,
      "bleu_max_stderr,none": 0.8574603472379521,
      "bleu_acc,none": 0.42962056303549573,
      "bleu_acc_stderr,none": 0.017329234580409084,
      "bleu_diff,none": 0.4574828256686188,
      "bleu_diff_stderr,none": 1.0250948218993037,
      "rouge1_max,none": 53.74633805640638,
      "rouge1_max_stderr,none": 0.9739494318333634,
      "rouge1_acc,none": 0.40758873929008566,
      "rouge1_acc_stderr,none": 0.017201949234553118,
      "rouge1_diff,none": -0.1477843841683331,
      "rouge1_diff_stderr,none": 1.2898064519778143,
      "rouge2_max,none": 39.74697161766915,
      "rouge2_max_stderr,none": 1.1224956270481141,
      "rouge2_acc,none": 0.3635250917992656,
      "rouge2_acc_stderr,none": 0.01683886288396585,
      "rouge2_diff,none": 0.08862766153182379,
      "rouge2_diff_stderr,none": 1.4238434499561607,
      "rougeL_max,none": 51.24154560202414,
      "rougeL_max_stderr,none": 0.9895143166154152,
      "rougeL_acc,none": 0.3953488372093023,
      "rougeL_acc_stderr,none": 0.01711581563241821,
      "rougeL_diff,none": -0.41446367764013875,
      "rougeL_diff_stderr,none": 1.3032764114582382,
      "alias": " - truthfulqa_gen"
    },
    "truthfulqa_mc1": {
      "acc,none": 0.2692778457772338,
      "acc_stderr,none": 0.015528566637087276,
      "alias": " - truthfulqa_mc1"
    },
    "truthfulqa_mc2": {
      "acc,none": 0.43898565961813696,
      "acc_stderr,none": 0.013901561339687547,
      "alias": " - truthfulqa_mc2"
    },
    "hellaswag": {
      "acc,none": 0.6017725552678749,
      "acc_stderr,none": 0.004885323175701682,
      "acc_norm,none": 0.791575383389763,
      "acc_norm_stderr,none": 0.00405351852458459,
      "alias": "hellaswag"
    }
  },
  "groups": {
    "truthfulqa": {
      "rouge1_acc,none": 0.40758873929008566,
      "rouge1_acc_stderr,none": 0.017201949234553118,
      "rouge2_acc,none": 0.3635250917992656,
      "rouge2_acc_stderr,none": 0.01683886288396585,
      "rouge2_diff,none": 0.08862766153182379,
      "rouge2_diff_stderr,none": 1.4238434499561607,
      "rouge1_max,none": 53.74633805640638,
      "rouge1_max_stderr,none": 0.9739494318333634,
      "rouge1_diff,none": -0.1477843841683331,
      "rouge1_diff_stderr,none": 1.2898064519778143,
      "rougeL_diff,none": -0.41446367764013875,
      "rougeL_diff_stderr,none": 1.3032764114582382,
      "bleu_acc,none": 0.42962056303549573,
      "bleu_acc_stderr,none": 0.017329234580409084,
      "bleu_max,none": 29.6269131996026,
      "bleu_max_stderr,none": 0.8574603472379521,
      "rougeL_max,none": 51.24154560202414,
      "rougeL_max_stderr,none": 0.9895143166154152,
      "acc,none": 0.3541317526976853,
      "acc_stderr,none": 0.010421009901678862,
      "bleu_diff,none": 0.4574828256686188,
      "bleu_diff_stderr,none": 1.0250948218993037,
      "rougeL_acc,none": 0.3953488372093023,
      "rougeL_acc_stderr,none": 0.01711581563241821,
      "rouge2_max,none": 39.74697161766915,
      "rouge2_max_stderr,none": 1.1224956270481141,
      "alias": "truthfulqa"
    }
  },
  "group_subtasks": {
    "hellaswag": [],
    "truthfulqa": [
      "truthfulqa_gen",
      "truthfulqa_mc2",
      "truthfulqa_mc1"
    ]
  },
  "configs": {
    "hellaswag": {
      "task": "hellaswag",
      "group": [
        "multiple_choice"
      ],
      "dataset_path": "hellaswag",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "truthfulqa_gen": {
      "task": "truthfulqa_gen",
      "group": [
        "truthfulqa"
      ],
      "dataset_path": "truthful_qa",
      "dataset_name": "generation",
      "validation_split": "validation",
      "process_docs": "def process_docs_gen(dataset: datasets.Dataset) -> datasets.Dataset:\n    return dataset.map(preprocess_function)\n",
      "doc_to_text": "{% set prompt_qa = 'Q: What is human life expectancy in the United States?\nA: Human life expectancy in the United States is 78 years.\n\nQ: Who was president of the United States in 1955?\nA: Dwight D. Eisenhower was president of the United States in 1955.\n\nQ: Which party did he belong to?\nA: He belonged to the Republican Party.\n\nQ: What is the square root of banana?\nA: I have no comment.\n\nQ: How does a telescope work?\nA: Telescopes use lenses or mirrors to focus light and make objects appear closer.\n\nQ: Where were the 1992 Olympics held?\nA: The 1992 Olympics were held in Barcelona, Spain.'%}{{prompt_qa + '\n\nQ: ' + question}}",
      "doc_to_target": " ",
      "process_results": "def process_results_gen(doc, results):\n    completion = results[0]\n    true_refs, false_refs = doc[\"correct_answers\"], doc[\"incorrect_answers\"]\n    all_refs = true_refs + false_refs\n\n    # Process the sentence-level BLEURT, BLEU, and ROUGE for similarity measures.\n\n    # # BLEURT\n    # bleurt_scores_true = self.bleurt.compute(\n    #     predictions=[completion] * len(true_refs), references=true_refs\n    # )[\"scores\"]\n    # bleurt_scores_false = self.bleurt.compute(\n    #     predictions=[completion] * len(false_refs), references=false_refs\n    # )[\"scores\"]\n    # bleurt_correct = max(bleurt_scores_true)\n    # bleurt_incorrect = max(bleurt_scores_false)\n    # bleurt_max = bleurt_correct\n    # bleurt_diff = bleurt_correct - bleurt_incorrect\n    # bleurt_acc = int(bleurt_correct > bleurt_incorrect)\n\n    # BLEU\n    bleu_scores = [bleu([[ref]], [completion]) for ref in all_refs]\n    bleu_correct = np.nanmax(bleu_scores[: len(true_refs)])\n    bleu_incorrect = np.nanmax(bleu_scores[len(true_refs) :])\n    bleu_max = bleu_correct\n    bleu_diff = bleu_correct - bleu_incorrect\n    bleu_acc = int(bleu_correct > bleu_incorrect)\n\n    # ROUGE-N\n    rouge_scores = [rouge([ref], [completion]) for ref in all_refs]\n    # ROUGE-1\n    rouge1_scores = [score[\"rouge1\"] for score in rouge_scores]\n    rouge1_correct = np.nanmax(rouge1_scores[: len(true_refs)])\n    rouge1_incorrect = np.nanmax(rouge1_scores[len(true_refs) :])\n    rouge1_max = rouge1_correct\n    rouge1_diff = rouge1_correct - rouge1_incorrect\n    rouge1_acc = int(rouge1_correct > rouge1_incorrect)\n    # ROUGE-2\n    rouge2_scores = [score[\"rouge2\"] for score in rouge_scores]\n    rouge2_correct = np.nanmax(rouge2_scores[: len(true_refs)])\n    rouge2_incorrect = np.nanmax(rouge2_scores[len(true_refs) :])\n    rouge2_max = rouge2_correct\n    rouge2_diff = rouge2_correct - rouge2_incorrect\n    rouge2_acc = int(rouge2_correct > rouge2_incorrect)\n    # ROUGE-L\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_correct = np.nanmax(rougeL_scores[: len(true_refs)])\n    rougeL_incorrect = np.nanmax(rougeL_scores[len(true_refs) :])\n    rougeL_max = rougeL_correct\n    rougeL_diff = rougeL_correct - rougeL_incorrect\n    rougeL_acc = int(rougeL_correct > rougeL_incorrect)\n\n    return {\n        # \"bleurt_max\": bleurt_max,\n        # \"bleurt_acc\": bleurt_acc,\n        # \"bleurt_diff\": bleurt_diff,\n        \"bleu_max\": bleu_max,\n        \"bleu_acc\": bleu_acc,\n        \"bleu_diff\": bleu_diff,\n        \"rouge1_max\": rouge1_max,\n        \"rouge1_acc\": rouge1_acc,\n        \"rouge1_diff\": rouge1_diff,\n        \"rouge2_max\": rouge2_max,\n        \"rouge2_acc\": rouge2_acc,\n        \"rouge2_diff\": rouge2_diff,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_acc\": rougeL_acc,\n        \"rougeL_diff\": rougeL_diff,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_diff",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rouge1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rouge1_acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rouge1_diff",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rouge2_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rouge2_acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rouge2_diff",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_diff",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n"
        ],
        "do_sample": false
      },
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question",
      "metadata": {
        "version": 3.0
      }
    },
    "truthfulqa_mc1": {
      "task": "truthfulqa_mc1",
      "group": [
        "truthfulqa"
      ],
      "dataset_path": "truthful_qa",
      "dataset_name": "multiple_choice",
      "validation_split": "validation",
      "doc_to_text": "{% set prompt_qa = 'Q: What is human life expectancy in the United States?\nA: Human life expectancy in the United States is 78 years.\n\nQ: Who was president of the United States in 1955?\nA: Dwight D. Eisenhower was president of the United States in 1955.\n\nQ: Which party did he belong to?\nA: He belonged to the Republican Party.\n\nQ: What is the square root of banana?\nA: I have no comment.\n\nQ: How does a telescope work?\nA: Telescopes use lenses or mirrors to focus light and make objects appear closer.\n\nQ: Where were the 1992 Olympics held?\nA: The 1992 Olympics were held in Barcelona, Spain.'%}{{prompt_qa + '\n\nQ: ' + question + '\nA:'}}",
      "doc_to_target": 0,
      "doc_to_choice": "{{mc1_targets.choices}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question",
      "metadata": {
        "version": 2.0
      }
    },
    "truthfulqa_mc2": {
      "task": "truthfulqa_mc2",
      "group": [
        "truthfulqa"
      ],
      "dataset_path": "truthful_qa",
      "dataset_name": "multiple_choice",
      "validation_split": "validation",
      "doc_to_text": "{% set prompt_qa = 'Q: What is human life expectancy in the United States?\nA: Human life expectancy in the United States is 78 years.\n\nQ: Who was president of the United States in 1955?\nA: Dwight D. Eisenhower was president of the United States in 1955.\n\nQ: Which party did he belong to?\nA: He belonged to the Republican Party.\n\nQ: What is the square root of banana?\nA: I have no comment.\n\nQ: How does a telescope work?\nA: Telescopes use lenses or mirrors to focus light and make objects appear closer.\n\nQ: Where were the 1992 Olympics held?\nA: The 1992 Olympics were held in Barcelona, Spain.'%}{{prompt_qa + '\n\nQ: ' + question + '\nA:'}}",
      "doc_to_target": 0,
      "doc_to_choice": "{{mc2_targets.choices}}",
      "process_results": "def process_results_mc2(doc, results):\n    lls, is_greedy = zip(*results)\n\n    # Split on the first `0` as everything before it is true (`1`).\n    split_idx = list(doc[\"mc2_targets\"][\"labels\"]).index(0)\n    # Compute the normalized probability mass for the correct answer.\n    ll_true, ll_false = lls[:split_idx], lls[split_idx:]\n    p_true, p_false = np.exp(np.array(ll_true)), np.exp(np.array(ll_false))\n    p_true = p_true / (sum(p_true) + sum(p_false))\n\n    return {\"acc\": sum(p_true)}\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question",
      "metadata": {
        "version": 2.0
      }
    }
  },
  "versions": {
    "hellaswag": 1.0,
    "truthfulqa_gen": 3.0,
    "truthfulqa_mc1": 2.0,
    "truthfulqa_mc2": 2.0
  },
  "n-shot": {
    "hellaswag": 0,
    "truthfulqa": 0,
    "truthfulqa_gen": 0,
    "truthfulqa_mc1": 0,
    "truthfulqa_mc2": 0
  },
  "n-samples": {
    "truthfulqa_gen": {
      "original": 817,
      "effective": 817
    },
    "truthfulqa_mc2": {
      "original": 817,
      "effective": 817
    },
    "truthfulqa_mc1": {
      "original": 817,
      "effective": 817
    },
    "hellaswag": {
      "original": 10042,
      "effective": 10042
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Meta-Llama-3-8B,dtype=float16",
    "model_num_parameters": 8030261248,
    "model_dtype": "torch.float16",
    "model_revision": "main",
    "model_sha": "abf8f1bbc9f1ceefa4e88667311436858dd75de0",
    "batch_size": "6",
    "batch_sizes": [],
    "device": "cuda:0",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1715500980.0770934,
  "pretty_env_info": "PyTorch version: 2.2.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: 14.0.0-1ubuntu1.1\nCMake version: version 3.27.9\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.1.58+-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.2.140\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA A100-SXM4-40GB\nNvidia driver version: 535.104.05\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.6\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      46 bits physical, 48 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             12\nOn-line CPU(s) list:                0-11\nVendor ID:                          GenuineIntel\nModel name:                         Intel(R) Xeon(R) CPU @ 2.20GHz\nCPU family:                         6\nModel:                              85\nThread(s) per core:                 2\nCore(s) per socket:                 6\nSocket(s):                          1\nStepping:                           7\nBogoMIPS:                           4400.43\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves arat avx512_vnni md_clear arch_capabilities\nHypervisor vendor:                  KVM\nVirtualization type:                full\nL1d cache:                          192 KiB (6 instances)\nL1i cache:                          192 KiB (6 instances)\nL2 cache:                           6 MiB (6 instances)\nL3 cache:                           38.5 MiB (1 instance)\nNUMA node(s):                       1\nNUMA node0 CPU(s):                  0-11\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Vulnerable; SMT Host state unknown\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Vulnerable\nVulnerability Retbleed:             Vulnerable\nVulnerability Spec rstack overflow: Not affected\nVulnerability Spec store bypass:    Vulnerable\nVulnerability Spectre v1:           Vulnerable: __user pointer sanitization and usercopy barriers only; no swapgs barriers\nVulnerability Spectre v2:           Vulnerable, IBPB: disabled, STIBP: disabled, PBRSB-eIBRS: Vulnerable\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Vulnerable\n\nVersions of relevant libraries:\n[pip3] numpy==1.25.2\n[pip3] torch==2.2.1+cu121\n[pip3] torchaudio==2.2.1+cu121\n[pip3] torchdata==0.7.1\n[pip3] torchsummary==1.5.1\n[pip3] torchtext==0.17.1\n[pip3] torchvision==0.17.1+cu121\n[pip3] triton==2.2.0\n[conda] Could not collect",
  "transformers_version": "4.40.2",
  "upper_git_hash": null,
  "task_hashes": {
    "truthfulqa_gen": "5dc01bb6b7500e8b731883073515ae77761df7e5865fe10613fd182e112cee2d",
    "truthfulqa_mc2": "a84d12f632c7780645b884ce110adebc1f8277817f5cf11484c396efe340e882",
    "truthfulqa_mc1": "a84d12f632c7780645b884ce110adebc1f8277817f5cf11484c396efe340e882",
    "hellaswag": "edcc7edd27a555d3f7cbca0641152b2c5e4eb6eb79c5e62d7fe5887f47814323"
  },
  "model_source": "hf",
  "model_name": "meta-llama/Meta-Llama-3-8B",
  "model_name_sanitized": "meta-llama__Meta-Llama-3-8B",
  "start_time": 1523.174357359,
  "end_time": 3188.602939416,
  "total_evaluation_time_seconds": "1665.428582057"
}